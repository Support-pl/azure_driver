#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2018, IONe Cloud Project, Support.by                             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION = ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION = "/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
    ETC_LOCATION      = "/etc/one/" if !defined?(ETC_LOCATION)
else
    RUBY_LIB_LOCATION = ONE_LOCATION + "/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
    ETC_LOCATION      = ONE_LOCATION + "/etc/" if !defined?(ETC_LOCATION)
end

$: << RUBY_LIB_LOCATION

require 'opennebula'

hp = OpenNebula::HostPool.new(OpenNebula::Client.new)
hp.info_all

host = hp.detect { |host| host.name == ARGV[-1] }

vms = host.to_hash['HOST']['VMS']['ID']
vms = [vms].compact if vms.class != Array

exit 0 if vms.empty?

require 'azure_driver'

subscription = host.to_hash['HOST']['TEMPLATE']['SUBSCRIPTION']	|| 'default'
az_drv = AzureDriver::Client.new(subscription)

result = ""

vms.each do | id |
    begin
        vm = OpenNebula::VirtualMachine.new_with_id(id, OpenNebula::Client.new)
        vm.info!
        deploy_id = vm.deploy_id

        if deploy_id == '-' then
            deploy_id = az_drv.get_vm_deploy_id_by_one_id id
        end

        poll, poll_data = az_drv.poll deploy_id

        result <<
            "VM = [\n" \
            "ID=\"#{id}\",\n" \
            "DEPLOY_ID=\"#{deploy_id}\",\n" \
            "POLL=\"#{poll}\",\n" \
            "CPU=\"#{poll_data[:cpu]}\",\n" \
            "MEMORY=\"#{poll_data[:memory]}\"\n" \
            "]\n"
        
    rescue
        result <<
            "VM = [\n" \
            "ID=\"#{id}\",\n" \
            "POLL=\"STATE=-\"\n" \
            "]\n"
    end
end

begin
    puts result
rescue => e
    STDERR.puts "Error monitoring Azure host: #{e.message}"
    exit -1
end
