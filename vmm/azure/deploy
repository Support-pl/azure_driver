#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2018, IONe Cloud Project, Support.by                             #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION

require 'opennebula'

dfile = ARGV[0]
host  = ARGV[1]
id    = ARGV[2]

vm = OpenNebula::VirtualMachine.new_with_id(id, OpenNebula::Client.new)
vm.info!
vm_name = "one-#{id}-#{vm.name}"
lcm_state = vm.lcm_state_str
deploy_id = vm.deploy_id

if vm.to_hash['VM']['USER_TEMPLATE']['IMPORTED'] == 'YES' then
    puts vm.to_hash['VM']['USER_TEMPLATE']['DEPLOY_ID']
    exit 0
end

template = vm.to_hash['VM']['TEMPLATE']
user_template = vm.to_hash['VM']['USER_TEMPLATE']

cloud = user_template['PUBLIC_CLOUD']
cloud = cloud.detect { | template | template['TYPE'] == 'AZURE' } if cloud.class == Array

rg_name = cloud["RESOURCE_GROUP"]
subnet = cloud["SUBNET"]
location = cloud["LOCATION"].downcase.delete(' ')

if (lcm_state == 'BOOT' && (deploy_id.nil? || deploy_id == "" || deploy_id == '--')) || lcm_state == 'BOOT_FAILURE' then

    require 'azure_driver'

    az_drv = AzureDriver::Client.new(host)

    conf =
    "CONTEXT=[\n" \
    "  DISK_SIZE=\"#{template['OS_DISK_SIZE']}\",\n" \
    "  VCPU=\"#{template['VCPU']}\",\n" \
    "  CPU=\"#{template['CPU']}\",\n" \
    "  MEMORY=\"#{template['MEMORY']}\"]\n"

    vm.updateconf(conf)

    # Create resource group
    az_drv.mk_resource_group rg_name, location
    # Create vnet
    subnet = az_drv.mk_virtual_network({
        :location => location,
        :rg_name => rg_name,
        :name => rg_name + '-vnet',
        :subnet => subnet
    })

    # Create iface
    iface = az_drv.mk_network_interface(
        rg_name, 
        (vm_name + '-iface'), 
        subnet, 
        location, 
        user_template['PUBLIC_IP'] == 'YES' ? true : false, # Public IP true/false
        user_template['ALLOW_PORTS'].split(',').map!{|el| el.delete(' ')} # Allowed ports array for NSG creation
    )
    # Create net profile
    network_profile = az_drv.generate_network_profile iface
    # Create storage profile
    image = cloud['IMAGE'].split('_')
    storage_profile = az_drv.generate_storage_profile(
        {
            :publisher => image[0],
            :name => image[1],
            :version => image[2],
            :subversion => image[3]
        },
        vm['/VM/USER_TEMPLATE/OS_DISK_SIZE'].to_i
    ) 

    # Create VM
    begin
        puts az_drv.mk_virtual_machine({
            :name => vm_name, :rg_name => rg_name, :location => location,
            :plan => cloud['INSTANCE_TYPE'], :hostname => "#{image[1].downcase}",
            :username => cloud['VM_USER'], :passwd => cloud['VM_PASSWORD'], 
            :network_profile => network_profile, :storage_profile => storage_profile
        }).vm_id
        vm.resched
    rescue => e
        STDERR.puts "Error deploying Azure VM: #{e.message}\nBackTrace:\n#{e.backtrace}"
        exit -1
    end
elsif deploy_id then
    require 'azure_driver'

    az_drv = AzureDriver::Client.new(host)
    if deploy_id == '-' then
        deploy_id = az_drv.get_vm_deploy_id_by_one_id id
    end
    puts az_drv.start_vm(deploy_id)
    vm.resched
else
    puts 'Not now, sorry'
end
